import 'package:coka/api/api_client.dart';
import 'package:dio/dio.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

import '../models/api_response.dart';

class StageApiService {
  // Kh·ªüi t·∫°o Dio v·ªõi baseUrl c·ªë ƒë·ªãnh cho API ch√≠nh
  final Dio _dio = Dio(
    BaseOptions(
      baseUrl: ApiClient.baseUrl, // üëà base URL cho stage list API
      contentType: 'application/json',
      // timeout, headers m·∫∑c ƒë·ªãnh‚Ä¶ c√≥ th·ªÉ th√™m t·∫°i ƒë√¢y
    ),
  );

  // Dio ri√™ng cho app.coka.ai APIs
  final Dio _appDio = Dio(
    BaseOptions(
      baseUrl: 'https://app.coka.ai', // üëà base URL cho hidden stages API
      contentType: 'application/json',
    ),
  );

  // Secure storage ƒë·ªÉ l·∫•y token
  static const FlutterSecureStorage _storage = FlutterSecureStorage();

  Future<ApiResponse> getStageList(String orgId, String workspaceId) async {
    try {
      final response = await _dio.get(
        '/api/v1/crm/category/stage/getlistpaging', // API endpoint m·ªõi
        queryParameters: {'limit': 1000},
        options: Options(headers: {
          'organizationId': orgId,
          'workspaceId': workspaceId,
          'Authorization': 'Bearer ${await getAccessToken()}',
          'accept': '*/*',
          'content-type': 'application/json',
        }),
      );

      return ApiResponse(
        isSuccess: response.statusCode == 200,
        data: response.data['content'] ?? response.data['data'] ?? response.data,
        message: response.data['message'] ?? '',
      );
    } catch (e) {
      return ApiResponse(
        isSuccess: false,
        data: [],
        message: e.toString(),
      );
    }
  }

  Future<HiddenStagesResponse> getHiddenStagesAndGroups(String orgId, String workspaceId) async {
    try {
      final response = await _appDio.get(
        // S·ª≠ d·ª•ng _appDio v·ªõi base URL app.coka.ai
        '/api/stages/visibility', // Endpoint ƒë√∫ng cho visibility
        queryParameters: {'workspaceId': workspaceId},
        options: Options(headers: {
          'organizationId': orgId,
          'Authorization': 'Bearer ${await getAccessToken()}',
          'Accept-Language': 'vi-VN,vi;q=0.9,en-VN;q=0.8,en;q=0.7,fr-FR;q=0.6,fr;q=0.5,en-US;q=0.4',
          'Content-Type': 'application/json',
          'accept': '*/*',
          'Connection': 'keep-alive',
          'Sec-Fetch-Dest': 'empty',
          'Sec-Fetch-Mode': 'cors',
          'Sec-Fetch-Site': 'same-origin',
          'User-Agent':
              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
          'sec-ch-ua': '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
          'sec-ch-ua-mobile': '?0',
          'sec-ch-ua-platform': '"Windows"',
        }),
      );

      return HiddenStagesResponse.fromJson(response.data);
    } catch (e) {
      // N·∫øu API visibility ch∆∞a c√≥, tr·∫£ v·ªÅ empty list
      print("Stage visibility API error: $e");
      return HiddenStagesResponse(hiddenStages: [], hiddenGroups: []);
    }
  }

  // Method ƒë·ªÉ l·∫•y access token t·ª´ secure storage
  Future<String> getAccessToken() async {
    try {
      final token = await _storage.read(key: 'access_token');
      return token ?? '';
    } catch (e) {
      print('Error getting access token: $e');
      return '';
    }
  }
}
